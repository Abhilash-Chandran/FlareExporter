{"version":3,"sources":["components/FieldsWithLabel/InputFieldWithLabel.js","components/FieldsWithLabel/SelectionFieldWithLabel.js","components/FlareAnimationController/FlareAnimationController.js","components/IconButtons/IconButton.js","components/Utils/Util.js","components/FlareExporterOptions/FlareExporterOptions.js","components/Overlays/Overlay.js","App.js","serviceWorker.js","index.js","components/Overlays/Help.md","components/Overlays/Info.md"],"names":["InputFieldWithLabel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","onChange","target","value","react_default","a","createElement","className","type","label","Component","SlectionFieldWithLabel","evt","_this2","options","keys","map","opt_group","key","optionValue","i","experimental","FlareAnimationController","currentAnimationName","animationShouldRepeat","animations","_currentAnimation","_animTime","_animationShouldRepeat","artboard","find","animation","_Name","elapsed","currentAnimation","animTime","apply","duration","FlareComponent","Controller","IconButton","handleClick","disabled","toggleClass","BtnRef","current","classList","toggle","alterLabel","currentLabel","React","createRef","onClick","ref","buttonName","iconText","htmlFor","labelFor","HdrLowBitRate","1440p","1080p","720p","HdrHighBitRate","SdrLowBitRate","480p","360p","SdrHighBitRate","getBitRate","framerate","quality","resolution","console","log","includes","FlareExporterOptions","handleFileSelect","preventDefault","length","setState","objectSpread","state","isAnimationPaused","flareController","selectedFile","files","recordAnimationDisabled","playAnimationDisabled","handleDragOver","stopPropagation","dataTransfer","dropEffect","handleDragLeave","handleDrop","handlePlayPauseAnimation","downloadVideoDisabled","handleCanvasWidthChange","canvasWidth","Number","parseInt","handleCanvasHeightChange","canvasHeight","handleAnimationNameChange","handleFlareComponentLoaded","handleVideoTypeChange","videoType","handleRecording","isRecording","stopRecording","animationName","startRecording","handleDownloadVideo","recordedBlobs","blob","Blob","url","window","URL","createObjectURL","document","style","display","href","download","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","handleFrameRateChange","newFrameRate","newBitRate","frameRate","bitRate","handleVideoQualityChange","selectedIndex","parentNode","mediaRecorder","renderAnimation","stream","querySelector","captureStream","mimeType","bitsPerSecond","MediaRecorder","e0","e1","e2","alert","error","onstop","handleStop","ondataavailable","handleDataAvailable","start","stop","startOrStopRecording","event","data","size","push","height","width","paddingTop","onDragOver","onDragLeave","onDrop","FlareReact_default","file","controller","onLoadedAnimations","isPaused","name","id","components_IconButtons_IconButton","FieldsWithLabel_InputFieldWithLabel","SelectionFieldWithLabel_SlectionFieldWithLabel","Available Animations","Standard FrameRate","High FrameRate","SDR","HDR","Video Format","ButtonWithOverlayText","overlayRef","markdown","fetch","mdfile","then","res","text","markdownText","react_markdown_default","source","styleName","menuText","App","Overlays_Overlay","Helpmd","FlareExporterOptions_FlareExporterOptions_FlareExporterOptions","Infomd","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.869c8d47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./FieldWithLabel.css\";\r\n\r\nclass InputFieldWithLabel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    this.props.onChange(e.target.value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Input-Field-With-Label\">\r\n        <input\r\n          type={this.props.type}\r\n          value={this.props.value}\r\n          onChange={this.handleChange}\r\n          className=\"InputField\"\r\n        />\r\n        <label className=\"FieldLabel\">{this.props.label}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputFieldWithLabel;\r\n","import \"./FieldWithLabel.css\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class SlectionFieldWithLabel extends Component {\r\n  handleChange = evt => {\r\n    this.props.handleChange(evt);\r\n  };\r\n\r\n  render() {\r\n    const options = this.props.options;\r\n    return (\r\n      <div className=\"Selection-Field-With-Label\">\r\n        <select className=\"SelectField\" onChange={this.handleChange}>\r\n          <optgroup />\r\n          {Object.keys(options).map(opt_group => (\r\n            <optgroup key={opt_group} label={opt_group}>\r\n              {options[opt_group].map((optionValue, i) => (\r\n                <option\r\n                  key={opt_group + \"_\" + this.props.label + \"_\" + i}\r\n                  value={optionValue}\r\n                >\r\n                  {optionValue}\r\n                </option>\r\n              ))}\r\n            </optgroup>\r\n          ))}\r\n          <optgroup />\r\n        </select>\r\n        <label className=\"FieldLabel\">{this.props.label}</label>\r\n        {this.props.experimental && (\r\n          <div className=\"ExperimentalNote\">experimental</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import FlareComponent from \"flare-react\";\r\n\r\nexport default class FlareAnimationController extends FlareComponent.Controller {\r\n  constructor(currentAnimationName, animationShouldRepeat) {\r\n    super();\r\n    this.animations = [];\r\n    this._currentAnimation = null;\r\n    this.currentAnimationName = currentAnimationName;\r\n    this._animTime = 0;\r\n    this._animationShouldRepeat = animationShouldRepeat;\r\n  }\r\n\r\n  initialize(artboard) {\r\n    this.animations = artboard.animations;\r\n    if (this.currentAnimationName === \"\") {\r\n      this._currentAnimation = this.animations[0];\r\n    } else {\r\n      this._currentAnimation = this.animations.find(\r\n        animation => animation._Name === this.currentAnimationName\r\n      );\r\n    }\r\n  }\r\n\r\n  advance(artboard, elapsed) {\r\n    // advance the animation time\r\n    this._animTime += elapsed;\r\n    const { _currentAnimation: currentAnimation, _animTime: animTime } = this;\r\n    currentAnimation.apply(animTime % currentAnimation.duration, artboard, 1.0);\r\n    if (\r\n      !this._animationShouldRepeat &&\r\n      animTime === currentAnimation.duration\r\n    ) {\r\n      return false;\r\n    }\r\n    // keep rendering\r\n    return true;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./IconButton.css\";\r\n\r\nclass IconButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.BtnRef = React.createRef();\r\n    this.currentLabel = this.props.label;\r\n    this.alterLabel = true;\r\n  }\r\n  handleClick = evt => {\r\n    if (!this.props.disabled) {\r\n      this.props.toggleClass != null &&\r\n        this.BtnRef.current.classList.toggle(this.props.toggleClass);\r\n      this.props.handleClick(evt);\r\n      if (this.props.alterLabel != null) {\r\n        this.currentLabel = !this.alterLabel\r\n          ? this.props.label\r\n          : this.props.alterLabel;\r\n        this.alterLabel = !this.alterLabel;\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div onClick={this.handleClick} className=\"IconStyle\">\r\n          <div\r\n            className={\"OuterCircle\" + (this.props.disabled ? \" disabled\" : \"\")}\r\n          >\r\n            <div\r\n              ref={this.BtnRef}\r\n              className={\r\n                this.props.buttonName +\r\n                \" icon\" +\r\n                (this.props.disabled ? \" disabled\" : \"\")\r\n              }\r\n            />\r\n            {this.props.iconText && (\r\n              <label htmlFor={this.props.labelFor} className=\"IconText\">\r\n                {this.props.iconText}\r\n              </label>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <label className=\"IconLabel\">{this.currentLabel}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IconButton;\r\n","const HdrLowBitRate = {\r\n  \"1440p\": 20000000,\r\n  \"1080p\": 10000000,\r\n  \"720p\": 6500000\r\n};\r\n\r\nconst HdrHighBitRate = {\r\n  \"1440p\": 30000000,\r\n  \"1080p\": 15000000,\r\n  \"720p\": 9500000\r\n};\r\n\r\nconst SdrLowBitRate = {\r\n  \"1440p\": 16000000,\r\n  \"1080p\": 8000000,\r\n  \"720p\": 5000000,\r\n  \"480p\": 2500000,\r\n  \"360p\": 1000000\r\n};\r\n\r\nconst SdrHighBitRate = {\r\n  \"1440p\": 24000000,\r\n  \"1080p\": 12000000,\r\n  \"720p\": 7500000,\r\n  \"480p\": 4000000,\r\n  \"360p\": 1500000\r\n};\r\n\r\nexport default function getBitRate(framerate, quality, resolution) {\r\n  console.log(framerate);\r\n  if (quality === \"HDR\") {\r\n    if ([24, 25, 30].includes(framerate)) {\r\n      return HdrLowBitRate[resolution];\r\n    } else {\r\n      return HdrHighBitRate[resolution];\r\n    }\r\n  } else {\r\n    if ([24, 25, 30].includes(framerate)) {\r\n      return SdrLowBitRate[resolution];\r\n    } else {\r\n      return SdrHighBitRate[resolution];\r\n    }\r\n  }\r\n}\r\n","import FlareComponent from \"flare-react\";\r\nimport React, { Component } from \"react\";\r\nimport InputFieldWithLabel from \"../FieldsWithLabel/InputFieldWithLabel\";\r\nimport SelctionFieldWithLabel from \"../FieldsWithLabel/SelectionFieldWithLabel\";\r\nimport \"./FlareExporterOptions.css\";\r\nimport FlareAnimationController from \"../FlareAnimationController/FlareAnimationController.js\";\r\nimport IconButton from \"../IconButtons/IconButton\";\r\nimport getBitRate from \"../Utils/Util\";\r\n\r\nexport default class FlareExporterOptions extends Component {\r\n  constructor(props) {\r\n    super();\r\n    // a set of variable to handle the video download.\r\n    this.mediaRecorder = null; // this records the stream from the flare canvas and its handlers push data to recorded blobs.\r\n    this.recordedBlobs = []; // Holds the recorded chunks of bytes as an array.\r\n\r\n    this.state = {\r\n      // variables to be sent to the FlareComponent\r\n      selectedFile: \"\",\r\n      canvasWidth: 500,\r\n      canvasHeight: 440,\r\n      animationName: \"\",\r\n      renderAnimation: true, // a local varible to handle display of the canvas.\r\n      flareController: new FlareAnimationController(\"\"),\r\n\r\n      // Variable to handle animations\r\n      animations: [],\r\n      isAnimationPaused: true,\r\n      isRecording: false,\r\n\r\n      // Video format variable\r\n      videoType: \"mp4\",\r\n      bitRate: 2500000, // 2.5 Mbits/s\r\n      frameRate: 30,\r\n      quality: \"SDR\",\r\n      resolution: \"360p\",\r\n\r\n      // variables to disable certain buttons to avoid errors.\r\n      downloadVideoDisabled: true,\r\n      playAnimationDisabled: true,\r\n      recordAnimationDisabled: true\r\n    };\r\n  }\r\n\r\n  // Handler for the file select input .\r\n  handleFileSelect = evt => {\r\n    evt.preventDefault();\r\n    if (evt.target.value.length > 0) {\r\n      // a guard to handle the user cliking cancel or close button.\r\n      this.setState({\r\n        ...this.state,\r\n        isAnimationPaused: true,\r\n        flareController: new FlareAnimationController(\"\", false),\r\n        selectedFile: evt.target.files[0],\r\n        recordAnimationDisabled: false,\r\n        playAnimationDisabled: false // enables the record animation button.\r\n      });\r\n    }\r\n  };\r\n\r\n  // A set of handlers to handle the drag and drop of a file into the canvas.\r\n  handleDragOver = evt => {\r\n    evt.stopPropagation();\r\n    evt.preventDefault();\r\n    evt.dataTransfer.dropEffect = \"copy\"; // switches the mouse hint to copy\r\n  };\r\n\r\n  handleDragLeave = evt => {\r\n    evt.stopPropagation();\r\n    evt.preventDefault();\r\n  };\r\n\r\n  handleDrop = evt => {\r\n    evt.preventDefault();\r\n    this.setState({\r\n      ...this.state,\r\n      isAnimationPaused: true,\r\n      flareController: new FlareAnimationController(\"\"),\r\n      selectedFile: evt.dataTransfer.files[0],\r\n      recordAnimationDisabled: false // enables the record animation button.\r\n    });\r\n  };\r\n\r\n  /* Since there is no props exposed by FLare component to pause or stop animation this simply \r\n  stops removes the falre component from the page by conditional rendering. Check the render method.\r\n  It uses the renderAnimation flag for this purpose.*/\r\n  handlePlayPauseAnimation = evt => {\r\n    console.log(\"Play pause is being caled.\");\r\n    if (this.state.isAnimationPaused) {\r\n      this.setState({\r\n        ...this.setState,\r\n        downloadVideoDisabled: false,\r\n        isAnimationPaused: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        ...this.setState,\r\n        isAnimationPaused: true\r\n      });\r\n    }\r\n  };\r\n\r\n  /* following set of methods handle the change of the canvas widht, canvas height and animation name changes.\r\n  Note once all the fields are filled properly, the FlareComponent starts playing the animation automatically \r\n  as it doesn't expose any props to achieve the start, stop, and pause animation. */\r\n  // sets canvas width\r\n  handleCanvasWidthChange = value => {\r\n    this.setState({\r\n      ...this.state,\r\n      canvasWidth: Number.parseInt(value)\r\n    });\r\n  };\r\n\r\n  // sets the canvas height\r\n  handleCanvasHeightChange = value => {\r\n    this.setState({\r\n      ...this.state,\r\n      canvasHeight: Number.parseInt(value)\r\n    });\r\n  };\r\n\r\n  // sets the animation name to be played.\r\n  handleAnimationNameChange = evt => {\r\n    this.setState({\r\n      ...this.state,\r\n      //animationName: value,\r\n      flareController: new FlareAnimationController(evt.target.value)\r\n      //recordAnimationDisabled: true\r\n    });\r\n  };\r\n\r\n  handleFlareComponentLoaded = evt => {\r\n    console.log(\"On loade is called with\");\r\n    this.setState({\r\n      ...this.state,\r\n      animations: this.state.flareController.animations.map(\r\n        animation => animation._Name\r\n      )\r\n    });\r\n  };\r\n  //handles the video export type format\r\n  handleVideoTypeChange = evt => {\r\n    this.setState({\r\n      ...this.state,\r\n      videoType: evt.target.value\r\n    });\r\n  };\r\n  // this handleer is called when the user clicks start or stop recording. Just a delegate method.\r\n  handleRecording = evt => {\r\n    if (!this.state.isRecording) {\r\n      // code for recording start\r\n      this.setState({\r\n        ...this.state,\r\n        flareController: new FlareAnimationController(this.state.animationName),\r\n        isAnimationPaused: false,\r\n        downloadVideoDisabled: true,\r\n        isRecording: true\r\n      });\r\n      this.startRecording();\r\n    } else {\r\n      // code for stopping the recording.\r\n      this.stopRecording();\r\n      this.setState({\r\n        ...this.state,\r\n        isAnimationPaused: true,\r\n        downloadVideoDisabled: false,\r\n        isRecording: false\r\n      });\r\n    }\r\n  };\r\n\r\n  /* This method handles the download of the video. It basically read the recordedblobs in a specified format\r\n  and creates url for that blob object. Then it creates anchor tag with this url, appends it to the dom \r\n  and programatically clicks that link so that user is shown a save window. This link is removed after 10ms. */\r\n  handleDownloadVideo = evt => {\r\n    evt.preventDefault();\r\n    if (this.recordedBlobs.length === 0) {\r\n      return;\r\n    }\r\n    const blob = new Blob(this.recordedBlobs, {\r\n      type: \"video/\" + this.state.videoType\r\n    });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = this.state.animationName + \".\" + this.state.videoType;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    setTimeout(() => {\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }, 100);\r\n    //this.recordedBlobs = []; // hope this clears the record buffer blob and avoid any memory leaks.\r\n  };\r\n\r\n  /** This method starts the recording proces.\r\n   * 1. it creates stream out of the canvas element. Not we are expecting only one canvas in the dom\r\n   *    which is the FlareComponent canvas.\r\n   * 2. Then create options where we mention the quality and format options for the video recorded.\r\n   * 3. Create mediaRecorder object passing the stream and options.\r\n   * 4. Handle browser version and support. To be documented later.\r\n   * 5. Attach the handlers mediaRecorder's onDataAvaialble(pushes data to recodedblobs variable)\r\n   *    and onstop events. Handle on error logi is missing but important will be done later.\r\n   * 6. Start the mediarecorder defining 100ms chunk size for recording.\r\n   *    This means it records for 100ms before anouncing the dataavailable event.\r\n   */\r\n  startRecording() {\r\n    const canvas = document.querySelector(\"canvas\");\r\n    const stream = canvas.captureStream(this.state.frameRate); // 120fps stream.\r\n\r\n    //TODO: This should be configurable.\r\n    //Mp4 format is default 2.5Mbit/s should be configurable.\r\n    var options = {\r\n      mimeType: \"video/\" + this.state.videoType + \";codecs=vp9\",\r\n      bitsPerSecond: this.setState.bitRate\r\n    };\r\n\r\n    this.recordedBlobs = [];\r\n    try {\r\n      this.mediaRecorder = new MediaRecorder(stream, options);\r\n    } catch (e0) {\r\n      console.log(\"Unable to create MediaRecorder with options Object: \", e0);\r\n      try {\r\n        options = {\r\n          mimeType: \"video/webm;codecs=vp8\",\r\n          bitsPerSecond: this.setState.bitRate\r\n        };\r\n        this.mediaRecorder = new MediaRecorder(stream, options);\r\n      } catch (e1) {\r\n        console.log(\"Unable to create MediaRecorder with options Object: \", e1);\r\n        try {\r\n          options = \"video/\" + this.state.videoType;\r\n          this.mediaRecorder = new MediaRecorder(stream, options);\r\n        } catch (e2) {\r\n          alert(\r\n            \"MediaRecorder is not supported by this browser.\\n\\n\" +\r\n              \"Try Firefox 29 or later, or Chrome 47 or later, \" +\r\n              \"with Enable experimental Web Platform features enabled from chrome://flags.\"\r\n          );\r\n          console.error(\"Exception while creating MediaRecorder:\", e2);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    this.mediaRecorder.onstop = this.handleStop.bind(this);\r\n    this.mediaRecorder.ondataavailable = this.handleDataAvailable.bind(this);\r\n    this.mediaRecorder.start(100); // collect 100ms of data\r\n  }\r\n\r\n  /** this method is called when a user initiates the stop recording.\r\n   *  this is important otherwise browser will run out of memory. :()\r\n   */\r\n  stopRecording() {\r\n    this.mediaRecorder.stop();\r\n    console.log(\"Recorded Blobs: \", this.recordedBlobs);\r\n    this.setState({\r\n      ...this.state,\r\n      downloadVideoDisabled: false,\r\n      startOrStopRecording: \"Start Recording\",\r\n      isRecording: false\r\n    });\r\n  }\r\n\r\n  /* Media recorder records chunks of 100ms of data and creates data availabel event. \r\n  This methods fetches the data and pushes it into the blob array.*/\r\n  handleDataAvailable(event) {\r\n    if (event.data && event.data.size > 0) {\r\n      this.recordedBlobs.push(event.data);\r\n    }\r\n  }\r\n\r\n  // handles the stop of of media recorder.\r\n  handleStop(event) {\r\n    console.log(\"Recorder stopped: \", event);\r\n  }\r\n\r\n  handleFrameRateChange = evt => {\r\n    let newFrameRate = evt.target.value;\r\n    let quality = this.state.quality;\r\n    let resolution = this.state.resolution;\r\n    let newBitRate = getBitRate(newFrameRate, quality, resolution);\r\n    console.log(\r\n      \"Inside event handler bitrate is - \" + newBitRate / 1000000 + \"Mbps\"\r\n    );\r\n    this.setState({\r\n      ...this.state,\r\n      frameRate: newFrameRate,\r\n      bitRate: newBitRate\r\n    });\r\n  };\r\n\r\n  handleVideoQualityChange = evt => {\r\n    let quality = evt.target.options[evt.target.selectedIndex].parentNode.label;\r\n    let frameRate = this.state.frameRate;\r\n    let resolution = evt.target.value;\r\n    let bitRate = getBitRate(frameRate, quality, resolution);\r\n    console.log(\r\n      \"Inside event handler bitrate is - \" + bitRate / 1000000 + \"Mbps\"\r\n    );\r\n    this.setState({\r\n      ...this.state,\r\n      bitRate: bitRate,\r\n      quality: quality,\r\n      resolution: resolution\r\n    });\r\n  };\r\n  /**\r\n   * Main render function which returns the UI to be displayed.\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"Flare-Exporter-Options\">\r\n        <div>\r\n          {this.state.selectedFile === \"\" && (\r\n            <div\r\n              className=\"DropZoneStyle\"\r\n              style={{\r\n                height: this.state.canvasHeight / 2,\r\n                width: this.state.canvasWidth,\r\n                paddingTop: this.state.canvasHeight / 2\r\n              }}\r\n              onDragOver={this.handleDragOver}\r\n              onDragLeave={this.handleDragLeave}\r\n              onDrop={this.handleDrop}\r\n            >\r\n              Drop a flare file here\r\n            </div>\r\n          )}\r\n          {this.state.renderAnimation && (\r\n            <div>\r\n              <FlareComponent\r\n                width={this.state.canvasWidth}\r\n                height={this.state.canvasHeight}\r\n                animationName={this.state.animationName}\r\n                file={this.state.selectedFile}\r\n                controller={this.state.flareController}\r\n                onLoadedAnimations={this.handleFlareComponentLoaded}\r\n                isPaused={this.state.isAnimationPaused}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <input\r\n            type=\"file\"\r\n            onChange={this.handleFileSelect}\r\n            className=\"inputfile\"\r\n            name=\"filechooser\"\r\n            id=\"filechooser\"\r\n          />\r\n          <div className=\"IconButtons\">\r\n            <IconButton\r\n              handleClick={() => {}}\r\n              iconText=\".flr\"\r\n              toggleClass=\"pause\"\r\n              labelFor=\"filechooser\"\r\n              label=\"Choose\"\r\n              disabled={false}\r\n            />\r\n            <InputFieldWithLabel\r\n              label=\"Width\"\r\n              type=\"number\"\r\n              value={this.state.canvasWidth}\r\n              onChange={this.handleCanvasWidthChange}\r\n            />\r\n            <InputFieldWithLabel\r\n              label=\"Height\"\r\n              type=\"number\"\r\n              value={this.state.canvasHeight}\r\n              onChange={this.handleCanvasHeightChange}\r\n            />\r\n            <SelctionFieldWithLabel\r\n              label=\"AnimationName\"\r\n              options={{ \"Available Animations\": this.state.animations }}\r\n              handleChange={this.handleAnimationNameChange}\r\n            />\r\n            <IconButton\r\n              handleClick={this.handlePlayPauseAnimation}\r\n              buttonName=\"Play\"\r\n              toggleClass=\"pause\"\r\n              label=\"Play\"\r\n              alterLabel=\"Pause\"\r\n              disabled={this.state.playAnimationDisabled}\r\n            />\r\n            <div className=\"VerticalLine\" />\r\n            <IconButton\r\n              handleClick={this.handleRecording}\r\n              buttonName=\"Record\"\r\n              toggleClass=\"stop\"\r\n              label=\"Record\"\r\n              disabled={this.state.recordAnimationDisabled}\r\n            />\r\n            <SelctionFieldWithLabel\r\n              label=\"FrameRate\"\r\n              experimental={true}\r\n              options={{\r\n                \"Standard FrameRate\": [24, 25, 30],\r\n                \"High FrameRate\": [48, 50, 60]\r\n              }}\r\n              handleChange={this.handleFrameRateChange}\r\n            />\r\n            <SelctionFieldWithLabel\r\n              label=\"Quality\"\r\n              experimental={true}\r\n              options={{\r\n                SDR: [\"1440p\", \"1080p\", \"720p\", \"480p\", \"360p\"],\r\n                HDR: [\"1440p\", \"1080p\", \"720p\"]\r\n              }}\r\n              handleChange={this.handleVideoQualityChange}\r\n            />\r\n            <SelctionFieldWithLabel\r\n              label=\"Format\"\r\n              options={{ \"Video Format\": [\"mp4\", \"webm\"] }}\r\n              handleChange={this.handleVideoTypeChange}\r\n            />\r\n            <IconButton\r\n              handleClick={this.handleDownloadVideo}\r\n              buttonName=\"Download\"\r\n              label=\"Download\"\r\n              disabled={this.state.downloadVideoDisabled}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Overlay.css\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nclass ButtonWithOverlayText extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.markdown = fetch(this.props.mdfile)\r\n      .then(res => res.text())\r\n      .then(text => {\r\n        this.setState({\r\n          ...this.state,\r\n          markdownText: text\r\n        });\r\n      });\r\n    this.overlayRef = React.createRef();\r\n    this.state = {\r\n      markdownText: \"relevant md file is missing.\"\r\n    };\r\n  }\r\n  handleClick = evt => {\r\n    this.overlayRef.current.classList.toggle(\"appear\");\r\n  };\r\n  render() {\r\n    const { markdownText } = this.state;\r\n    return (\r\n      <div>\r\n        <div\r\n          ref={this.overlayRef}\r\n          onClick={this.handleClick}\r\n          className=\"Overlay\"\r\n        >\r\n          <ReactMarkdown className=\"OverlayText\" source={markdownText} />\r\n        </div>\r\n        <div\r\n          className={this.props.styleName + \"Button\"}\r\n          onClick={this.handleClick}\r\n        >\r\n          {this.props.menuText}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonWithOverlayText;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FlareExporterOptions from \"./components/FlareExporterOptions/FlareExporterOptions\";\nimport ButtonWithOverlayText from \"./components/Overlays/Overlay\";\nimport Helpmd from \"../src/components/Overlays/Help.md\";\nimport Infomd from \"../src/components/Overlays/Info.md\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ButtonWithOverlayText\n          styleName=\"Help\"\n          menuText=\"Help?\"\n          mdfile={Helpmd}\n        />\n        <FlareExporterOptions />\n        <ButtonWithOverlayText\n          styleName=\"Info\"\n          menuText=\"Info!\"\n          mdfile={Infomd}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Help.66db96db.md\";","module.exports = __webpack_public_path__ + \"static/media/Info.f0fbd95f.md\";"],"sourceRoot":""}